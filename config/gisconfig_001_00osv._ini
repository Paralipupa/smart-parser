; Оборотно-сальдовая ведомость
; accounts, pp, pp_changes
; Обязательные колонки:
; ЛС(0), 
; Задолженность на начало (1)
; Начислено (2)
; Оплачено  (4)
; Конечный остаток (5)

[check]
; Поиск ключевого значения по строке(ам) для определения совместимости
; входных данных и конфигурации

row=0<10

[main]
path_output=output
row_start=0
page_name=
page_index=0
max_columns=150
max_rows_heading=15
rows_exclude=0<6

[headers_0]
name=period
row=0<6
column=0<4
pattern=[0-9]{2}\.[0-9]{2}\.[0-9]{2,4}
pattern_0=(?<= за )\s*[А-Яа-я]+\s*[0-9]{4}
pattern_1=(?<= с )\s*[А-Яа-я]+\s*[0-9]{4}
pattern_2=(?<= периода:)\s*[А-Яа-я]+\s*[0-9]{4}

[headers_1]
name=address
row=0<4
column=0<2
pattern=(?<=Адрес:)[ А-Яа-я0-9\.,-]+
pattern_0=(?<=")[А-Яа-я0-9,-\/ ].+(?=")
pattern_1=.+,[0-9]{1,3}
pattern_2=(?<=ОСВ ).+(?= c )
pattern_3=^ул\..+(?=, кв)

[col_0]
name=ЛС
pattern=^Счет$
condition_begin_team=^(?!Договор).+$
condition_begin_team_0=^[А-Яа-яёЁ-]+\s+[А-Яа-яёЁ]+\s+[А-Яа-яЁё]+(?:вич|вна)$
is_unique=true

[col_1] 
name=Задолженность на начало
pattern=^Дебет$
pattern_0=^Сумма Начальный остаток$
is_unique=true

[col_2]
name=Итого начислено
pattern=^Дебет$
pattern_0=^Сумма начислений$
is_unique=true

[col_3]
name=Всего начислено

[col_4] 
name=Оплачено
pattern=^Кредит$
pattern_0=^Сумма оплаты$
is_unique=true
border_column_left=2

[col_5] 
name=Конечный остаток
pattern=^Дебет$
pattern_0=^Сумма Конечный остаток$
is_unique=true

[col_6] 
name=Пени

[col_7]
name=Квартира

[col_8] 
name=Площадь

[col_9] 
name=Кол-во проживающих

[col_10] 
name=ХВС
pattern=^Счет$
is_duplicate=true
is_optional=true


[col_11] 
name=Водоотведение
pattern=^Счет$
is_duplicate=true
is_optional=true

[col_12] 
name=ГВС

[col_13] 
name=Услуги

;---------------  Документы -------------------------
; --------- accounts -----------
[doc_0]
; Лицевые счета
name=accounts
required_fields=account_number

[accounts_0]
; ИНН, ОГРН или OrgID
name=org_ppa_guid
pattern=@
col_config=0
row_data=0
func=inn

[accounts_1]
; Внутренний идентификатор договора
name=contract_internal_id

[accounts_2]
; Внутренний идентификатор ЛС
name=internal_id
pattern=@0
col_config=0
row_data=0
func=id

[accounts_3]
; Идентификатор дома GUID
name=fias

[accounts_4]
; Адрес дома
name=address
pattern=@0
col_config=0
row_data=0
func=param(address)

[accounts_5]
; Номер помещения (если есть)
name=room_number
pattern=(?:(?<=Кв.)|(?<=Оф.)).+[0-9]+[а-яА-Я()-\/]*?\s*(?=,)
pattern_0=^[0-9]{1,3}$
pattern_1=(?<=кв\..{1})[0-9]+
col_config=7
row_data=0

[accounts_6]
; ГИС. Идентификатор квартиры GUID
name=gis_premises_id

[accounts_7]
; ГИС. Идентификатор блока GUID
name=gis_block_id

[accounts_8]
; ГИС. Идентификатор комнаты GUID
name=gis_room_id

[accounts_9]
; ГИС. Идентификатор ЛС GUID
name=gis_account_id

[accounts_10]
; Номер ЛС
name=account_number
pattern=@0
col_config=0
row_data=0

[accounts_11]
; ГИС. Идентификатор ЛС (20)
name=gis_account_service_id

[accounts_12]
; ГИС. Номер ЛИ (20)
name=gis_account_unified_number

[accounts_13]
; Общая площадь помещения
name=total_square
pattern=@0
col_config=0
row_data=0
offset_type=float
offset_col_config=8
offset_pattern=^\d{1,3}(?:[\.,]\d{1,3})?$

[accounts_14]
; Жилая площадь
name=residential_square

[accounts_15]
; Кол-во проживающих
name=living_person_number
pattern=@0
col_config=0
row_data=0
offset_type=int
offset_col_config=9
offset_pattern=^\d{1,2}$

[accounts_16]
; Часовой пояс. Кол-во часов + или - от UTC
name=timezone

[accounts_17]
; Альтернативный идентификатор ЛС, используется в некоторых конфигурациях.
; Если  internal_id, по каким-то причинам не получается использовать.
name=account_identifier
pattern=@0
col_config=0
row_data=0
func=id,id,spacerepl

[accounts_18]
; Признак нежилого помещения (0 1)
name=not_residential

; --------- pp -----------
[doc_1]
name=pp
required_fields=bill_value

[pp_0]
;ИНН, ОГРН или OrgID
name=org_ppa_guid
pattern=@
col_config=0
row_data=0
func=inn

[pp_1]
; Внутренний идентификатор ПД
name=internal_id
pattern=@0
col_config=0
row_data=0
func=id,guid

[pp_2]
; Внутренний идентификатор ЛС
name=account_internal_id
pattern=@0
col_config=0
row_data=0
func=id,guid

[pp_3]
; ГИС. Идентификатор ПП
name=gis_id
pattern=@0
col_config=0
row_data=0
func=id,guid
; func=id,id,hash

[pp_4]
; Месяц (первый день месяца)
name=month
pattern=@0
col_config=0
row_data=0
func=period

[pp_5]
; Сальдо на начало месяца (<0 переплата, >0 задолженность)
name=credit
pattern=@0
col_config=0
row_data=0
offset_col_config=1
offset_type=float
offset_pattern=^-?\d{1,5}(?:[\.,]\d{1,3})?$
func=round2

[pp_6]
; Сальдо на конец месяца (<0 переплата, >0 задолженность)
name=saldo
pattern=@0
col_config=0
row_data=0
offset_col_config=5
offset_type=float
offset_pattern=^-?\d{1,5}(?:[\.,]\d{1,3})?$
func=round2

[pp_7]
; Оплачено денежных средств в расчетный период
name=payment_value
pattern=@0
col_config=0
row_data=0
offset_col_config=4
offset_type=float
offset_pattern=^-?\d{1,5}(?:[\.,]\d{1,3})?$



[pp_8]
; Учтены платежи, поступившие до указанного числа расчетного периода включительно
name=payment_date
pattern=@0
col_config=0
row_data=0
func=period
depends_on=payment_value

[pp_9]
; Сумма счета, учетом задолженности/переплаты
name=bill_value
pattern=@0
col_config=0
row_data=0
offset_col_config=2
offset_type=float
offset_pattern=^-?\d{1,5}(?:[\.,]\d{1,3})?$

[pp_10]
; Номер расчетного счета
name=account_number

[pp_11]
; БИК банка
name=bank_bik

; --------- pp_changes -----------
[doc_2]
; Документ Начисления платежей
name=pp_charges
required_fields=calc_value

[pp_charges_0]
; ИНН, ОГРН или OrgID
name=org_ppa_guid
pattern=@
col_config=0
row_data=0
func=inn

[pp_charges_1]
; Внутренний идентификатор начисления
name=internal_id
pattern=@0
col_config=0
row_data=0
func=id,guid

[pp_charges_2]
; Внутренний идентификатор платежного документа
name=pp_internal_id
pattern=@0
col_config=0
row_data=0
func=id,guid

[pp_charges_3]
; Сумма начисления при однотарифном начислении (поля:Элект,ХВС,Услуги)
name=calc_value
col_config=0
pattern=водоотведение
offset_pattern=^-?\d{1,6}(?:[\.,]\d{1,2})?$
offset_col_config=2

[pp_charges_3_0]
; Сумма начисления при однотарифном начислении (поля:Элект,ХВС,Услуги)
name=calc_value
col_config=0
pattern=холод
offset_pattern=^-?\d{1,6}(?:[\.,]\d{1,2})?$
offset_col_config=2


[pp_charges_4]
; тариф при однотарифном начислении (поля: ГВС, ХВС)
name=tariff
pattern=
col_config=
row_data=0

[pp_charges_5]
; Идентификатор услуги (поля: ГВС,ХВС,Элект,Услуги)
; применена функция column_name, которая возвращает наименование группы или колонки
name=service_internal_id
pattern=водоотведение        
    if os.path.isdir(PATH_OUTPUT):
        list(map(os.unlink, (os.path.join(PATH_OUTPUT, f)
             for f in os.listdir(PATH_OUTPUT))))
    if os.path.isdir(PATH_LOG):
        list(map(os.unlink, (os.path.join(PATH_LOG, f)
             for f in os.listdir(PATH_LOG))))

    list_files = get_files(namespace)
    i = 0
    if list_files:
        for file_name in list_files:
            i += 1
            if file_name['config']:
                if file_name['config'] != '000':
                    t = regular_calc('[0-9]{3}(?=_)', str(file_name['config']))
                    rep: ExcelBaseImporter = report[t](file_name=file_name['name'],
                                                       inn=file_name['inn'], config_file=str(file_name['config']))
                    if rep.read():
                        rep.write_collections(i)
                        rep.write_logs(i)
                    else:
                        if rep._config._warning:
                            logging.warning(
                                f"{file_name['inn']} - {file_name['name']}  не все поля найдены см.logs/")
                    file_name['warning'] += rep._config._warning
            else:
                if len(file_name['warning']) != 0:
                    logging.warning(
                        f"{file_name['inn']} - {file_name['name']}")
                else:
                    logging.warning(
                        f"{file_name['inn']} - {file_name['name']} не найден файл конфигурации.")
        write_list(list_files)

col_config=0
row_data=
func=водоотведение

[pp_charges_5_0]
; Идентификатор услуги (поля: ГВС,ХВС,Элект,Услуги)
; применена функция column_name, которая возвращает наименование группы или колонки
pattern=холод
col_config=0
row_data=
func=холодная вода

[pp_charges_5_1]
; Идентификатор услуги (поля: ГВС,ХВС,Элект,Услуги)
; применена функция column_name, которая возвращает наименование группы или колонки
pattern=счетчик
col_config=0        
    if os.path.isdir(PATH_OUTPUT):
        list(map(os.unlink, (os.path.join(PATH_OUTPUT, f)
             for f in os.listdir(PATH_OUTPUT))))
    if os.path.isdir(PATH_LOG):
        list(map(os.unlink, (os.path.join(PATH_LOG, f)        
    if os.path.isdir(PATH_OUTPUT):
        list(map(os.unlink, (os.path.join(PATH_OUTPUT, f)
             for f in os.listdir(PATH_OUTPUT))))
    if os.path.isdir(PATH_LOG):
        list(map(os.unlink, (os.path.join(PATH_LOG, f)
             for f in os.listdir(PATH_LOG))))

    list_files = get_files(namespace)
    i = 0
    if list_files:
        for file_name in list_files:
            i += 1
            if file_name['config']:
                if file_name['config'] != '000':
                    t = regular_calc('[0-9]{3}(?=_)', str(file_name['config']))
                    rep: ExcelBaseImporter = report[t](file_name=file_name['name'],
                                                       inn=file_name['inn'], config_file=str(file_name['config']))
                    if rep.read():
                        rep.write_collections(i)
                        rep.write_logs(i)
                    else:
                        if rep._config._warning:
                            logging.warning(
                                f"{file_name['inn']} - {file_name['name']}  не все поля найдены см.logs/")
                    file_name['warning'] += rep._config._warning
            else:
                if len(file_name['warning']) != 0:
                    logging.warning(
                        f"{file_name['inn']} - {file_name['name']}")
                else:
                    logging.warning(
                        f"{file_name['inn']} - {file_name['name']} не найден файл конфигурации.")
        write_list(list_files)

    list_files = get_files(namespace)
    i = 0
    if list_files:
        for file_name in list_files:
            i += 1
            if file_name['config']:
                if file_name['config'] != '000':
                    t = regular_calc('[0-9]{3}(?=_)', str(file_name['config']))
                    rep: ExcelBaseImporter = report[t](file_name=file_name['name'],
                                                       inn=file_name['inn'], config_file=str(file_name['config']))
                    if rep.read():
                        rep.write_collections(i)
                        rep.write_logs(i)
                    else:
                        if rep._config._warning:
                            logging.warning(
                                f"{file_name['inn']} - {file_name['name']}  не все поля найдены см.logs/")
                    file_name['warning'] += rep._config._warning
            else:
                if len(file_name['warning']) != 0:
                    logging.warning(
                        f"{file_name['inn']} - {file_name['name']}")
                else:
                    logging.warning(
                        f"{file_name['inn']} - {file_name['name']} не найден файл конфигурации.")
        write_list(list_files)
ХВС,Элект)
name=rr
pattern=
col_config=
row_data=0

[pp_charges_7]
; перерасчет
name=recalculation
pattern=
col_config=
row_data=3
func=

[pp_charges_8]
; Начислено за расчетный период,с  учетом перерасчета
name=accounting_period_total
pattern=@3
col_config=0
offset_pattern=^-?\d{1,6}(?:[\.,]\d{1,2})?$
offset_col_config=2

